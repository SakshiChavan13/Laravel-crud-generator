<?php

use App\Models\User;
use App\Models\{{ modelName }};
use Symfony\Component\HttpFoundation\Response;

it('returns list of {{ route }}', function () {
    $user = User::factory()->create();
    {{ modelName }}::factory(5)->create();
    $response = $this->actingAs($user)->getJson('/api/{{ route }}');
    $response->assertStatus(Response::HTTP_OK);
    $response->assertJsonCount(5, 'data');
});

it('returns single data of {{ modelName }}', function () {
    $user = User::factory()->create();
    $model = {{ modelName }}::factory()->create();
    $response = $this->actingAs($user)->getJson('/api/{{ route }}/' . $model->id);
    $response->assertStatus(Response::HTTP_OK);
});

it('returns 201 when {{ modelName }} created successfully', function () {
    $user = User::factory()->create();
    $response = $this->actingAs($user)->postJson('/api/{{ route }}', [
        // TODO: add valid fields
    ]);
    $response->assertStatus(Response::HTTP_CREATED);
});

it('returns 422 when required fields are missing', function () {
    $user = User::factory()->create();
    $response = $this->actingAs($user)->postJson('/api/{{ route }}', []);
    $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
});

it('returns 200 when {{ modelName }} updated successfully', function () {
    $user = User::factory()->create();
    $model = {{ modelName }}::factory()->create();
    $response = $this->actingAs($user)->putJson('/api/{{ route }}/' . $model->id, [
        // TODO: add updated fields
    ]);
    $response->assertStatus(Response::HTTP_OK);
});

it('returns 204 when {{ modelName | lower }} deleted successfully', function () {
    $user = User::factory()->create();
    $model = {{ modelName }}::factory()->create();
    $response = $this->actingAs($user)->deleteJson('/api/{{ route }}/' . $model->id);
    $response->assertStatus(Response::HTTP_NO_CONTENT);
});

it('returns 404 when trying to fetch non-existent {{ modelName | lower }}', function () {
    $user = User::factory()->create();
    $response = $this->actingAs($user)->getJson('/api/{{ route }}/999999');
    $response->assertStatus(Response::HTTP_NOT_FOUND);
});
